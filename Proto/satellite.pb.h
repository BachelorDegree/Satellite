// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: satellite.proto

#ifndef PROTOBUF_INCLUDED_satellite_2eproto
#define PROTOBUF_INCLUDED_satellite_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_satellite_2eproto 

namespace protobuf_satellite_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_satellite_2eproto
class GeneralStatus;
class GeneralStatusDefaultTypeInternal;
extern GeneralStatusDefaultTypeInternal _GeneralStatus_default_instance_;
class GetAllServiceNamesResponse;
class GetAllServiceNamesResponseDefaultTypeInternal;
extern GetAllServiceNamesResponseDefaultTypeInternal _GetAllServiceNamesResponse_default_instance_;
class GetCurrentVersionResponse;
class GetCurrentVersionResponseDefaultTypeInternal;
extern GetCurrentVersionResponseDefaultTypeInternal _GetCurrentVersionResponse_default_instance_;
class GetServiceNodesRequest;
class GetServiceNodesRequestDefaultTypeInternal;
extern GetServiceNodesRequestDefaultTypeInternal _GetServiceNodesRequest_default_instance_;
class GetServiceNodesResponse;
class GetServiceNodesResponseDefaultTypeInternal;
extern GetServiceNodesResponseDefaultTypeInternal _GetServiceNodesResponse_default_instance_;
class HeartbeatRequest;
class HeartbeatRequestDefaultTypeInternal;
extern HeartbeatRequestDefaultTypeInternal _HeartbeatRequest_default_instance_;
class ServiceInfo;
class ServiceInfoDefaultTypeInternal;
extern ServiceInfoDefaultTypeInternal _ServiceInfo_default_instance_;
namespace google {
namespace protobuf {
template<> ::GeneralStatus* Arena::CreateMaybeMessage<::GeneralStatus>(Arena*);
template<> ::GetAllServiceNamesResponse* Arena::CreateMaybeMessage<::GetAllServiceNamesResponse>(Arena*);
template<> ::GetCurrentVersionResponse* Arena::CreateMaybeMessage<::GetCurrentVersionResponse>(Arena*);
template<> ::GetServiceNodesRequest* Arena::CreateMaybeMessage<::GetServiceNodesRequest>(Arena*);
template<> ::GetServiceNodesResponse* Arena::CreateMaybeMessage<::GetServiceNodesResponse>(Arena*);
template<> ::HeartbeatRequest* Arena::CreateMaybeMessage<::HeartbeatRequest>(Arena*);
template<> ::ServiceInfo* Arena::CreateMaybeMessage<::ServiceInfo>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class GeneralStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GeneralStatus) */ {
 public:
  GeneralStatus();
  virtual ~GeneralStatus();

  GeneralStatus(const GeneralStatus& from);

  inline GeneralStatus& operator=(const GeneralStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GeneralStatus(GeneralStatus&& from) noexcept
    : GeneralStatus() {
    *this = ::std::move(from);
  }

  inline GeneralStatus& operator=(GeneralStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GeneralStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeneralStatus* internal_default_instance() {
    return reinterpret_cast<const GeneralStatus*>(
               &_GeneralStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GeneralStatus* other);
  friend void swap(GeneralStatus& a, GeneralStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GeneralStatus* New() const final {
    return CreateMaybeMessage<GeneralStatus>(NULL);
  }

  GeneralStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GeneralStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GeneralStatus& from);
  void MergeFrom(const GeneralStatus& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeneralStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GeneralStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::int32 code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_satellite_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HeartbeatRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HeartbeatRequest) */ {
 public:
  HeartbeatRequest();
  virtual ~HeartbeatRequest();

  HeartbeatRequest(const HeartbeatRequest& from);

  inline HeartbeatRequest& operator=(const HeartbeatRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HeartbeatRequest(HeartbeatRequest&& from) noexcept
    : HeartbeatRequest() {
    *this = ::std::move(from);
  }

  inline HeartbeatRequest& operator=(HeartbeatRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HeartbeatRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HeartbeatRequest* internal_default_instance() {
    return reinterpret_cast<const HeartbeatRequest*>(
               &_HeartbeatRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(HeartbeatRequest* other);
  friend void swap(HeartbeatRequest& a, HeartbeatRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HeartbeatRequest* New() const final {
    return CreateMaybeMessage<HeartbeatRequest>(NULL);
  }

  HeartbeatRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HeartbeatRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HeartbeatRequest& from);
  void MergeFrom(const HeartbeatRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeartbeatRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ServiceInfo service_info = 1;
  bool has_service_info() const;
  void clear_service_info();
  static const int kServiceInfoFieldNumber = 1;
  private:
  const ::ServiceInfo& _internal_service_info() const;
  public:
  const ::ServiceInfo& service_info() const;
  ::ServiceInfo* release_service_info();
  ::ServiceInfo* mutable_service_info();
  void set_allocated_service_info(::ServiceInfo* service_info);

  // int64 timestamp = 2;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:HeartbeatRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ServiceInfo* service_info_;
  ::google::protobuf::int64 timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_satellite_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServiceInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServiceInfo) */ {
 public:
  ServiceInfo();
  virtual ~ServiceInfo();

  ServiceInfo(const ServiceInfo& from);

  inline ServiceInfo& operator=(const ServiceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServiceInfo(ServiceInfo&& from) noexcept
    : ServiceInfo() {
    *this = ::std::move(from);
  }

  inline ServiceInfo& operator=(ServiceInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceInfo* internal_default_instance() {
    return reinterpret_cast<const ServiceInfo*>(
               &_ServiceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ServiceInfo* other);
  friend void swap(ServiceInfo& a, ServiceInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServiceInfo* New() const final {
    return CreateMaybeMessage<ServiceInfo>(NULL);
  }

  ServiceInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServiceInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServiceInfo& from);
  void MergeFrom(const ServiceInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string service_name = 1;
  void clear_service_name();
  static const int kServiceNameFieldNumber = 1;
  const ::std::string& service_name() const;
  void set_service_name(const ::std::string& value);
  #if LANG_CXX11
  void set_service_name(::std::string&& value);
  #endif
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  ::std::string* mutable_service_name();
  ::std::string* release_service_name();
  void set_allocated_service_name(::std::string* service_name);

  // string server_ip_port = 2;
  void clear_server_ip_port();
  static const int kServerIpPortFieldNumber = 2;
  const ::std::string& server_ip_port() const;
  void set_server_ip_port(const ::std::string& value);
  #if LANG_CXX11
  void set_server_ip_port(::std::string&& value);
  #endif
  void set_server_ip_port(const char* value);
  void set_server_ip_port(const char* value, size_t size);
  ::std::string* mutable_server_ip_port();
  ::std::string* release_server_ip_port();
  void set_allocated_server_ip_port(::std::string* server_ip_port);

  // int32 weight = 3;
  void clear_weight();
  static const int kWeightFieldNumber = 3;
  ::google::protobuf::int32 weight() const;
  void set_weight(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServiceInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr service_name_;
  ::google::protobuf::internal::ArenaStringPtr server_ip_port_;
  ::google::protobuf::int32 weight_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_satellite_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetCurrentVersionResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GetCurrentVersionResponse) */ {
 public:
  GetCurrentVersionResponse();
  virtual ~GetCurrentVersionResponse();

  GetCurrentVersionResponse(const GetCurrentVersionResponse& from);

  inline GetCurrentVersionResponse& operator=(const GetCurrentVersionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetCurrentVersionResponse(GetCurrentVersionResponse&& from) noexcept
    : GetCurrentVersionResponse() {
    *this = ::std::move(from);
  }

  inline GetCurrentVersionResponse& operator=(GetCurrentVersionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetCurrentVersionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCurrentVersionResponse* internal_default_instance() {
    return reinterpret_cast<const GetCurrentVersionResponse*>(
               &_GetCurrentVersionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(GetCurrentVersionResponse* other);
  friend void swap(GetCurrentVersionResponse& a, GetCurrentVersionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetCurrentVersionResponse* New() const final {
    return CreateMaybeMessage<GetCurrentVersionResponse>(NULL);
  }

  GetCurrentVersionResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetCurrentVersionResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetCurrentVersionResponse& from);
  void MergeFrom(const GetCurrentVersionResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCurrentVersionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:GetCurrentVersionResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_satellite_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetServiceNodesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GetServiceNodesRequest) */ {
 public:
  GetServiceNodesRequest();
  virtual ~GetServiceNodesRequest();

  GetServiceNodesRequest(const GetServiceNodesRequest& from);

  inline GetServiceNodesRequest& operator=(const GetServiceNodesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetServiceNodesRequest(GetServiceNodesRequest&& from) noexcept
    : GetServiceNodesRequest() {
    *this = ::std::move(from);
  }

  inline GetServiceNodesRequest& operator=(GetServiceNodesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetServiceNodesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetServiceNodesRequest* internal_default_instance() {
    return reinterpret_cast<const GetServiceNodesRequest*>(
               &_GetServiceNodesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(GetServiceNodesRequest* other);
  friend void swap(GetServiceNodesRequest& a, GetServiceNodesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetServiceNodesRequest* New() const final {
    return CreateMaybeMessage<GetServiceNodesRequest>(NULL);
  }

  GetServiceNodesRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetServiceNodesRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetServiceNodesRequest& from);
  void MergeFrom(const GetServiceNodesRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServiceNodesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string service_name = 1;
  void clear_service_name();
  static const int kServiceNameFieldNumber = 1;
  const ::std::string& service_name() const;
  void set_service_name(const ::std::string& value);
  #if LANG_CXX11
  void set_service_name(::std::string&& value);
  #endif
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  ::std::string* mutable_service_name();
  ::std::string* release_service_name();
  void set_allocated_service_name(::std::string* service_name);

  // @@protoc_insertion_point(class_scope:GetServiceNodesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr service_name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_satellite_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetServiceNodesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GetServiceNodesResponse) */ {
 public:
  GetServiceNodesResponse();
  virtual ~GetServiceNodesResponse();

  GetServiceNodesResponse(const GetServiceNodesResponse& from);

  inline GetServiceNodesResponse& operator=(const GetServiceNodesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetServiceNodesResponse(GetServiceNodesResponse&& from) noexcept
    : GetServiceNodesResponse() {
    *this = ::std::move(from);
  }

  inline GetServiceNodesResponse& operator=(GetServiceNodesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetServiceNodesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetServiceNodesResponse* internal_default_instance() {
    return reinterpret_cast<const GetServiceNodesResponse*>(
               &_GetServiceNodesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(GetServiceNodesResponse* other);
  friend void swap(GetServiceNodesResponse& a, GetServiceNodesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetServiceNodesResponse* New() const final {
    return CreateMaybeMessage<GetServiceNodesResponse>(NULL);
  }

  GetServiceNodesResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetServiceNodesResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetServiceNodesResponse& from);
  void MergeFrom(const GetServiceNodesResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServiceNodesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServiceInfo nodes = 2;
  int nodes_size() const;
  void clear_nodes();
  static const int kNodesFieldNumber = 2;
  ::ServiceInfo* mutable_nodes(int index);
  ::google::protobuf::RepeatedPtrField< ::ServiceInfo >*
      mutable_nodes();
  const ::ServiceInfo& nodes(int index) const;
  ::ServiceInfo* add_nodes();
  const ::google::protobuf::RepeatedPtrField< ::ServiceInfo >&
      nodes() const;

  // .GeneralStatus status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  private:
  const ::GeneralStatus& _internal_status() const;
  public:
  const ::GeneralStatus& status() const;
  ::GeneralStatus* release_status();
  ::GeneralStatus* mutable_status();
  void set_allocated_status(::GeneralStatus* status);

  // @@protoc_insertion_point(class_scope:GetServiceNodesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ServiceInfo > nodes_;
  ::GeneralStatus* status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_satellite_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetAllServiceNamesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GetAllServiceNamesResponse) */ {
 public:
  GetAllServiceNamesResponse();
  virtual ~GetAllServiceNamesResponse();

  GetAllServiceNamesResponse(const GetAllServiceNamesResponse& from);

  inline GetAllServiceNamesResponse& operator=(const GetAllServiceNamesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetAllServiceNamesResponse(GetAllServiceNamesResponse&& from) noexcept
    : GetAllServiceNamesResponse() {
    *this = ::std::move(from);
  }

  inline GetAllServiceNamesResponse& operator=(GetAllServiceNamesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAllServiceNamesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAllServiceNamesResponse* internal_default_instance() {
    return reinterpret_cast<const GetAllServiceNamesResponse*>(
               &_GetAllServiceNamesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(GetAllServiceNamesResponse* other);
  friend void swap(GetAllServiceNamesResponse& a, GetAllServiceNamesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetAllServiceNamesResponse* New() const final {
    return CreateMaybeMessage<GetAllServiceNamesResponse>(NULL);
  }

  GetAllServiceNamesResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetAllServiceNamesResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetAllServiceNamesResponse& from);
  void MergeFrom(const GetAllServiceNamesResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAllServiceNamesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string service_names = 1;
  int service_names_size() const;
  void clear_service_names();
  static const int kServiceNamesFieldNumber = 1;
  const ::std::string& service_names(int index) const;
  ::std::string* mutable_service_names(int index);
  void set_service_names(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_service_names(int index, ::std::string&& value);
  #endif
  void set_service_names(int index, const char* value);
  void set_service_names(int index, const char* value, size_t size);
  ::std::string* add_service_names();
  void add_service_names(const ::std::string& value);
  #if LANG_CXX11
  void add_service_names(::std::string&& value);
  #endif
  void add_service_names(const char* value);
  void add_service_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& service_names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_service_names();

  // @@protoc_insertion_point(class_scope:GetAllServiceNamesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> service_names_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_satellite_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GeneralStatus

// int32 code = 1;
inline void GeneralStatus::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 GeneralStatus::code() const {
  // @@protoc_insertion_point(field_get:GeneralStatus.code)
  return code_;
}
inline void GeneralStatus::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:GeneralStatus.code)
}

// string message = 2;
inline void GeneralStatus::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GeneralStatus::message() const {
  // @@protoc_insertion_point(field_get:GeneralStatus.message)
  return message_.GetNoArena();
}
inline void GeneralStatus::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GeneralStatus.message)
}
#if LANG_CXX11
inline void GeneralStatus::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GeneralStatus.message)
}
#endif
inline void GeneralStatus::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GeneralStatus.message)
}
inline void GeneralStatus::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GeneralStatus.message)
}
inline ::std::string* GeneralStatus::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:GeneralStatus.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GeneralStatus::release_message() {
  // @@protoc_insertion_point(field_release:GeneralStatus.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GeneralStatus::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:GeneralStatus.message)
}

// -------------------------------------------------------------------

// HeartbeatRequest

// .ServiceInfo service_info = 1;
inline bool HeartbeatRequest::has_service_info() const {
  return this != internal_default_instance() && service_info_ != NULL;
}
inline void HeartbeatRequest::clear_service_info() {
  if (GetArenaNoVirtual() == NULL && service_info_ != NULL) {
    delete service_info_;
  }
  service_info_ = NULL;
}
inline const ::ServiceInfo& HeartbeatRequest::_internal_service_info() const {
  return *service_info_;
}
inline const ::ServiceInfo& HeartbeatRequest::service_info() const {
  const ::ServiceInfo* p = service_info_;
  // @@protoc_insertion_point(field_get:HeartbeatRequest.service_info)
  return p != NULL ? *p : *reinterpret_cast<const ::ServiceInfo*>(
      &::_ServiceInfo_default_instance_);
}
inline ::ServiceInfo* HeartbeatRequest::release_service_info() {
  // @@protoc_insertion_point(field_release:HeartbeatRequest.service_info)
  
  ::ServiceInfo* temp = service_info_;
  service_info_ = NULL;
  return temp;
}
inline ::ServiceInfo* HeartbeatRequest::mutable_service_info() {
  
  if (service_info_ == NULL) {
    auto* p = CreateMaybeMessage<::ServiceInfo>(GetArenaNoVirtual());
    service_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:HeartbeatRequest.service_info)
  return service_info_;
}
inline void HeartbeatRequest::set_allocated_service_info(::ServiceInfo* service_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete service_info_;
  }
  if (service_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      service_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, service_info, submessage_arena);
    }
    
  } else {
    
  }
  service_info_ = service_info;
  // @@protoc_insertion_point(field_set_allocated:HeartbeatRequest.service_info)
}

// int64 timestamp = 2;
inline void HeartbeatRequest::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 HeartbeatRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:HeartbeatRequest.timestamp)
  return timestamp_;
}
inline void HeartbeatRequest::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:HeartbeatRequest.timestamp)
}

// -------------------------------------------------------------------

// ServiceInfo

// string service_name = 1;
inline void ServiceInfo::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServiceInfo::service_name() const {
  // @@protoc_insertion_point(field_get:ServiceInfo.service_name)
  return service_name_.GetNoArena();
}
inline void ServiceInfo::set_service_name(const ::std::string& value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServiceInfo.service_name)
}
#if LANG_CXX11
inline void ServiceInfo::set_service_name(::std::string&& value) {
  
  service_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServiceInfo.service_name)
}
#endif
inline void ServiceInfo::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServiceInfo.service_name)
}
inline void ServiceInfo::set_service_name(const char* value, size_t size) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServiceInfo.service_name)
}
inline ::std::string* ServiceInfo::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:ServiceInfo.service_name)
  return service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServiceInfo::release_service_name() {
  // @@protoc_insertion_point(field_release:ServiceInfo.service_name)
  
  return service_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceInfo::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:ServiceInfo.service_name)
}

// string server_ip_port = 2;
inline void ServiceInfo::clear_server_ip_port() {
  server_ip_port_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServiceInfo::server_ip_port() const {
  // @@protoc_insertion_point(field_get:ServiceInfo.server_ip_port)
  return server_ip_port_.GetNoArena();
}
inline void ServiceInfo::set_server_ip_port(const ::std::string& value) {
  
  server_ip_port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServiceInfo.server_ip_port)
}
#if LANG_CXX11
inline void ServiceInfo::set_server_ip_port(::std::string&& value) {
  
  server_ip_port_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServiceInfo.server_ip_port)
}
#endif
inline void ServiceInfo::set_server_ip_port(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_ip_port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServiceInfo.server_ip_port)
}
inline void ServiceInfo::set_server_ip_port(const char* value, size_t size) {
  
  server_ip_port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServiceInfo.server_ip_port)
}
inline ::std::string* ServiceInfo::mutable_server_ip_port() {
  
  // @@protoc_insertion_point(field_mutable:ServiceInfo.server_ip_port)
  return server_ip_port_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServiceInfo::release_server_ip_port() {
  // @@protoc_insertion_point(field_release:ServiceInfo.server_ip_port)
  
  return server_ip_port_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceInfo::set_allocated_server_ip_port(::std::string* server_ip_port) {
  if (server_ip_port != NULL) {
    
  } else {
    
  }
  server_ip_port_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_ip_port);
  // @@protoc_insertion_point(field_set_allocated:ServiceInfo.server_ip_port)
}

// int32 weight = 3;
inline void ServiceInfo::clear_weight() {
  weight_ = 0;
}
inline ::google::protobuf::int32 ServiceInfo::weight() const {
  // @@protoc_insertion_point(field_get:ServiceInfo.weight)
  return weight_;
}
inline void ServiceInfo::set_weight(::google::protobuf::int32 value) {
  
  weight_ = value;
  // @@protoc_insertion_point(field_set:ServiceInfo.weight)
}

// -------------------------------------------------------------------

// GetCurrentVersionResponse

// int64 timestamp = 1;
inline void GetCurrentVersionResponse::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GetCurrentVersionResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:GetCurrentVersionResponse.timestamp)
  return timestamp_;
}
inline void GetCurrentVersionResponse::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:GetCurrentVersionResponse.timestamp)
}

// -------------------------------------------------------------------

// GetServiceNodesRequest

// string service_name = 1;
inline void GetServiceNodesRequest::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetServiceNodesRequest::service_name() const {
  // @@protoc_insertion_point(field_get:GetServiceNodesRequest.service_name)
  return service_name_.GetNoArena();
}
inline void GetServiceNodesRequest::set_service_name(const ::std::string& value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GetServiceNodesRequest.service_name)
}
#if LANG_CXX11
inline void GetServiceNodesRequest::set_service_name(::std::string&& value) {
  
  service_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetServiceNodesRequest.service_name)
}
#endif
inline void GetServiceNodesRequest::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetServiceNodesRequest.service_name)
}
inline void GetServiceNodesRequest::set_service_name(const char* value, size_t size) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetServiceNodesRequest.service_name)
}
inline ::std::string* GetServiceNodesRequest::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:GetServiceNodesRequest.service_name)
  return service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetServiceNodesRequest::release_service_name() {
  // @@protoc_insertion_point(field_release:GetServiceNodesRequest.service_name)
  
  return service_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetServiceNodesRequest::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:GetServiceNodesRequest.service_name)
}

// -------------------------------------------------------------------

// GetServiceNodesResponse

// .GeneralStatus status = 1;
inline bool GetServiceNodesResponse::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
inline void GetServiceNodesResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) {
    delete status_;
  }
  status_ = NULL;
}
inline const ::GeneralStatus& GetServiceNodesResponse::_internal_status() const {
  return *status_;
}
inline const ::GeneralStatus& GetServiceNodesResponse::status() const {
  const ::GeneralStatus* p = status_;
  // @@protoc_insertion_point(field_get:GetServiceNodesResponse.status)
  return p != NULL ? *p : *reinterpret_cast<const ::GeneralStatus*>(
      &::_GeneralStatus_default_instance_);
}
inline ::GeneralStatus* GetServiceNodesResponse::release_status() {
  // @@protoc_insertion_point(field_release:GetServiceNodesResponse.status)
  
  ::GeneralStatus* temp = status_;
  status_ = NULL;
  return temp;
}
inline ::GeneralStatus* GetServiceNodesResponse::mutable_status() {
  
  if (status_ == NULL) {
    auto* p = CreateMaybeMessage<::GeneralStatus>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:GetServiceNodesResponse.status)
  return status_;
}
inline void GetServiceNodesResponse::set_allocated_status(::GeneralStatus* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete status_;
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:GetServiceNodesResponse.status)
}

// repeated .ServiceInfo nodes = 2;
inline int GetServiceNodesResponse::nodes_size() const {
  return nodes_.size();
}
inline void GetServiceNodesResponse::clear_nodes() {
  nodes_.Clear();
}
inline ::ServiceInfo* GetServiceNodesResponse::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:GetServiceNodesResponse.nodes)
  return nodes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ServiceInfo >*
GetServiceNodesResponse::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:GetServiceNodesResponse.nodes)
  return &nodes_;
}
inline const ::ServiceInfo& GetServiceNodesResponse::nodes(int index) const {
  // @@protoc_insertion_point(field_get:GetServiceNodesResponse.nodes)
  return nodes_.Get(index);
}
inline ::ServiceInfo* GetServiceNodesResponse::add_nodes() {
  // @@protoc_insertion_point(field_add:GetServiceNodesResponse.nodes)
  return nodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServiceInfo >&
GetServiceNodesResponse::nodes() const {
  // @@protoc_insertion_point(field_list:GetServiceNodesResponse.nodes)
  return nodes_;
}

// -------------------------------------------------------------------

// GetAllServiceNamesResponse

// repeated string service_names = 1;
inline int GetAllServiceNamesResponse::service_names_size() const {
  return service_names_.size();
}
inline void GetAllServiceNamesResponse::clear_service_names() {
  service_names_.Clear();
}
inline const ::std::string& GetAllServiceNamesResponse::service_names(int index) const {
  // @@protoc_insertion_point(field_get:GetAllServiceNamesResponse.service_names)
  return service_names_.Get(index);
}
inline ::std::string* GetAllServiceNamesResponse::mutable_service_names(int index) {
  // @@protoc_insertion_point(field_mutable:GetAllServiceNamesResponse.service_names)
  return service_names_.Mutable(index);
}
inline void GetAllServiceNamesResponse::set_service_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:GetAllServiceNamesResponse.service_names)
  service_names_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void GetAllServiceNamesResponse::set_service_names(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:GetAllServiceNamesResponse.service_names)
  service_names_.Mutable(index)->assign(std::move(value));
}
#endif
inline void GetAllServiceNamesResponse::set_service_names(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  service_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:GetAllServiceNamesResponse.service_names)
}
inline void GetAllServiceNamesResponse::set_service_names(int index, const char* value, size_t size) {
  service_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GetAllServiceNamesResponse.service_names)
}
inline ::std::string* GetAllServiceNamesResponse::add_service_names() {
  // @@protoc_insertion_point(field_add_mutable:GetAllServiceNamesResponse.service_names)
  return service_names_.Add();
}
inline void GetAllServiceNamesResponse::add_service_names(const ::std::string& value) {
  service_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:GetAllServiceNamesResponse.service_names)
}
#if LANG_CXX11
inline void GetAllServiceNamesResponse::add_service_names(::std::string&& value) {
  service_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:GetAllServiceNamesResponse.service_names)
}
#endif
inline void GetAllServiceNamesResponse::add_service_names(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  service_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:GetAllServiceNamesResponse.service_names)
}
inline void GetAllServiceNamesResponse::add_service_names(const char* value, size_t size) {
  service_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:GetAllServiceNamesResponse.service_names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetAllServiceNamesResponse::service_names() const {
  // @@protoc_insertion_point(field_list:GetAllServiceNamesResponse.service_names)
  return service_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GetAllServiceNamesResponse::mutable_service_names() {
  // @@protoc_insertion_point(field_mutable_list:GetAllServiceNamesResponse.service_names)
  return &service_names_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_satellite_2eproto
