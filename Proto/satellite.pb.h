// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: satellite.proto

#ifndef PROTOBUF_INCLUDED_satellite_2eproto
#define PROTOBUF_INCLUDED_satellite_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_satellite_2eproto 

namespace protobuf_satellite_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_satellite_2eproto
class GeneralStatus;
class GeneralStatusDefaultTypeInternal;
extern GeneralStatusDefaultTypeInternal _GeneralStatus_default_instance_;
class HeartbeatRequest;
class HeartbeatRequestDefaultTypeInternal;
extern HeartbeatRequestDefaultTypeInternal _HeartbeatRequest_default_instance_;
namespace google {
namespace protobuf {
template<> ::GeneralStatus* Arena::CreateMaybeMessage<::GeneralStatus>(Arena*);
template<> ::HeartbeatRequest* Arena::CreateMaybeMessage<::HeartbeatRequest>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class GeneralStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GeneralStatus) */ {
 public:
  GeneralStatus();
  virtual ~GeneralStatus();

  GeneralStatus(const GeneralStatus& from);

  inline GeneralStatus& operator=(const GeneralStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GeneralStatus(GeneralStatus&& from) noexcept
    : GeneralStatus() {
    *this = ::std::move(from);
  }

  inline GeneralStatus& operator=(GeneralStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GeneralStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeneralStatus* internal_default_instance() {
    return reinterpret_cast<const GeneralStatus*>(
               &_GeneralStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GeneralStatus* other);
  friend void swap(GeneralStatus& a, GeneralStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GeneralStatus* New() const final {
    return CreateMaybeMessage<GeneralStatus>(NULL);
  }

  GeneralStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GeneralStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GeneralStatus& from);
  void MergeFrom(const GeneralStatus& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeneralStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GeneralStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::int32 code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_satellite_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HeartbeatRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HeartbeatRequest) */ {
 public:
  HeartbeatRequest();
  virtual ~HeartbeatRequest();

  HeartbeatRequest(const HeartbeatRequest& from);

  inline HeartbeatRequest& operator=(const HeartbeatRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HeartbeatRequest(HeartbeatRequest&& from) noexcept
    : HeartbeatRequest() {
    *this = ::std::move(from);
  }

  inline HeartbeatRequest& operator=(HeartbeatRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HeartbeatRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HeartbeatRequest* internal_default_instance() {
    return reinterpret_cast<const HeartbeatRequest*>(
               &_HeartbeatRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(HeartbeatRequest* other);
  friend void swap(HeartbeatRequest& a, HeartbeatRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HeartbeatRequest* New() const final {
    return CreateMaybeMessage<HeartbeatRequest>(NULL);
  }

  HeartbeatRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HeartbeatRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HeartbeatRequest& from);
  void MergeFrom(const HeartbeatRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeartbeatRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string service_name = 1;
  void clear_service_name();
  static const int kServiceNameFieldNumber = 1;
  const ::std::string& service_name() const;
  void set_service_name(const ::std::string& value);
  #if LANG_CXX11
  void set_service_name(::std::string&& value);
  #endif
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  ::std::string* mutable_service_name();
  ::std::string* release_service_name();
  void set_allocated_service_name(::std::string* service_name);

  // string server_ip_port = 2;
  void clear_server_ip_port();
  static const int kServerIpPortFieldNumber = 2;
  const ::std::string& server_ip_port() const;
  void set_server_ip_port(const ::std::string& value);
  #if LANG_CXX11
  void set_server_ip_port(::std::string&& value);
  #endif
  void set_server_ip_port(const char* value);
  void set_server_ip_port(const char* value, size_t size);
  ::std::string* mutable_server_ip_port();
  ::std::string* release_server_ip_port();
  void set_allocated_server_ip_port(::std::string* server_ip_port);

  // uint64 timestamp = 3;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:HeartbeatRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr service_name_;
  ::google::protobuf::internal::ArenaStringPtr server_ip_port_;
  ::google::protobuf::uint64 timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_satellite_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GeneralStatus

// int32 code = 1;
inline void GeneralStatus::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 GeneralStatus::code() const {
  // @@protoc_insertion_point(field_get:GeneralStatus.code)
  return code_;
}
inline void GeneralStatus::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:GeneralStatus.code)
}

// string message = 2;
inline void GeneralStatus::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GeneralStatus::message() const {
  // @@protoc_insertion_point(field_get:GeneralStatus.message)
  return message_.GetNoArena();
}
inline void GeneralStatus::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GeneralStatus.message)
}
#if LANG_CXX11
inline void GeneralStatus::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GeneralStatus.message)
}
#endif
inline void GeneralStatus::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GeneralStatus.message)
}
inline void GeneralStatus::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GeneralStatus.message)
}
inline ::std::string* GeneralStatus::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:GeneralStatus.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GeneralStatus::release_message() {
  // @@protoc_insertion_point(field_release:GeneralStatus.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GeneralStatus::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:GeneralStatus.message)
}

// -------------------------------------------------------------------

// HeartbeatRequest

// string service_name = 1;
inline void HeartbeatRequest::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HeartbeatRequest::service_name() const {
  // @@protoc_insertion_point(field_get:HeartbeatRequest.service_name)
  return service_name_.GetNoArena();
}
inline void HeartbeatRequest::set_service_name(const ::std::string& value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HeartbeatRequest.service_name)
}
#if LANG_CXX11
inline void HeartbeatRequest::set_service_name(::std::string&& value) {
  
  service_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HeartbeatRequest.service_name)
}
#endif
inline void HeartbeatRequest::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HeartbeatRequest.service_name)
}
inline void HeartbeatRequest::set_service_name(const char* value, size_t size) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HeartbeatRequest.service_name)
}
inline ::std::string* HeartbeatRequest::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:HeartbeatRequest.service_name)
  return service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HeartbeatRequest::release_service_name() {
  // @@protoc_insertion_point(field_release:HeartbeatRequest.service_name)
  
  return service_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeartbeatRequest::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:HeartbeatRequest.service_name)
}

// string server_ip_port = 2;
inline void HeartbeatRequest::clear_server_ip_port() {
  server_ip_port_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HeartbeatRequest::server_ip_port() const {
  // @@protoc_insertion_point(field_get:HeartbeatRequest.server_ip_port)
  return server_ip_port_.GetNoArena();
}
inline void HeartbeatRequest::set_server_ip_port(const ::std::string& value) {
  
  server_ip_port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HeartbeatRequest.server_ip_port)
}
#if LANG_CXX11
inline void HeartbeatRequest::set_server_ip_port(::std::string&& value) {
  
  server_ip_port_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HeartbeatRequest.server_ip_port)
}
#endif
inline void HeartbeatRequest::set_server_ip_port(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_ip_port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HeartbeatRequest.server_ip_port)
}
inline void HeartbeatRequest::set_server_ip_port(const char* value, size_t size) {
  
  server_ip_port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HeartbeatRequest.server_ip_port)
}
inline ::std::string* HeartbeatRequest::mutable_server_ip_port() {
  
  // @@protoc_insertion_point(field_mutable:HeartbeatRequest.server_ip_port)
  return server_ip_port_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HeartbeatRequest::release_server_ip_port() {
  // @@protoc_insertion_point(field_release:HeartbeatRequest.server_ip_port)
  
  return server_ip_port_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeartbeatRequest::set_allocated_server_ip_port(::std::string* server_ip_port) {
  if (server_ip_port != NULL) {
    
  } else {
    
  }
  server_ip_port_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_ip_port);
  // @@protoc_insertion_point(field_set_allocated:HeartbeatRequest.server_ip_port)
}

// uint64 timestamp = 3;
inline void HeartbeatRequest::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 HeartbeatRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:HeartbeatRequest.timestamp)
  return timestamp_;
}
inline void HeartbeatRequest::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:HeartbeatRequest.timestamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_satellite_2eproto
